<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:context="http://www.springframework.org/schema/context" 
	   xmlns:jee="http://www.springframework.org/schema/jee" 
	   xmlns:tx="http://www.springframework.org/schema/tx" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd  
	                      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	                      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd         
	                      http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd         
	                      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

	<!-- 加载注解功能 -->
	<context:spring-configured />
	<context:annotation-config />
	<tx:annotation-driven />
	
	<!-- 扫描本工程bean -->
	<context:component-scan base-package="cn">
	</context:component-scan>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- <property name="annotationClass" value="org.springframework.stereotype.Repository" 
			/> -->
		<property name="basePackage" value="cn" />
		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"></property>
	</bean>
	<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource"
		  destroy-method="close">
		<property name="driverClass" value="${db.driverClass}" />
		<property name="jdbcUrl" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />

		<!-- /** Maximum age of an unused connection before it is closed off. */ -->
		<!-- 设置分区个数。这个参数默认为1，建议3-4（根据特定应用程序而定）。
		 为了减少锁竞争和改善性能，从当前线程分区(thread-affinity)中获取一个connection，
		 也就是这个样子：partitions[Thread.currentThread().getId() % partitionCount]。
		 当拥有充足的短期(short-lived)的线程时候，这个参数设置越大，性能越好。
		当超过一定的阀值时，连接池的维护工作就可能对性能造成一定的负面影响（仅当分区上的connection使用耗尽时） -->
		<property name="partitionCount" value="${db.partitionCount}" />

		<!-- 设置每个分区含有connection最大个数。这个参数默认为2。如果小于2，BoneCP将设置为50。
		比如：partitionCount设置为3，maxConnectionPerPartition设置为5，你就会拥有总共15个connection。
		注意：BoneCP不会将这些connection一起创建出来，而是说在需要更多connection的时候从minConnectionsPerPartition参数开始逐步地增长connection数量。  -->
		<property name="maxConnectionsPerPartition" value="${db.maxConnectionsPerPartition}" />

		<!-- 设置每个分区含有connection最大小个数。这个参数默认为0。  -->
		<property name="minConnectionsPerPartition" value="${db.minConnectionsPerPartition}" />

		<!-- 设置分区中的connection增长数量。这个参数默认为1。
		当每个分区中的connection大约快用完时，BoneCP动态批量创建connection，
		这个属性控制一起创建多少个connection（不会大于maxConnectionsPerPartition）。
		注意：这个配置属于每个分区的设置。  -->
		<property name="acquireIncrement" value="${db.acquireIncrement}" />

		<!-- 设置连接池阀值。这个参数默认为20。如果小于0或是大于100，BoneCP将设置为20。
		连接池观察线程(PoolWatchThread)试图为每个分区维护一定数量的可用connection。
		这个数量趋于maxConnectionPerPartition和minConnectionPerPartition之间。这个参数是以百分比的形式来计算的。
		例如：设置为20，下面的条件如果成立：Free Connections / MaxConnections < poolAvailabilityThreshold；就会创建出新的connection。
		换句话来说连接池为每个分区至少维持20%数量的可用connection。
		设置为0时，每当需要connection的时候，连接池就要重新创建新connection，这个时候可能导致应用程序可能会为了获得新connection而小等一会。  -->
		<property name="poolAvailabilityThreshold" value="${db.poolAvailabilityThreshold}" />

		<!-- 设置获取connection超时的时间。这个参数默认为Long.MAX_VALUE;单位：毫秒。
		在调用getConnection获取connection时，获取时间超过了这个参数，就视为超时并报异常。  -->
		<property name="connectionTimeoutInMs" value="${db.connectionTimeoutInMs}" />

		<!-- /** Number of release-connection helper threads to create per partition. */ -->
		<!-- 设置connection助手线程个数。这个参数默认为3。如果小于0，BoneCP将设置为3。
		设置为0时，应用程序线程被阻塞，直到连接池执行必要地清除和回收connection，并使connection在其它线程可用。
		设置大于0时，连接池在每个分区中创建助手线程处理回收关闭后的connection（应用程序会通过助手线程异步地将这个connection放置到一个临时队列中进行处理)。
		对于应用程序在每个connection上处理大量工作时非常有用。可能会降低运行速度，不过在高并发的应用中会提高性能。 -->
		<property name="releaseHelperThreads" value="${db.releaseHelperThreads}" />

		<!-- /** Number of statement release helper threads to create. */ -->
		<!-- 设置statement助手线程个数。这个参数默认为3。如果小于0，BoneCP将设置为3。
		设置为0时，应用程序线程被阻塞，直到连接池或JDBC驱动程序关闭statement。
		设置大于0时，连接池会在每个分区中创建助理线程，异步地帮助应用程序关闭statement当应用程序打开了大量的statement是非常有用的。
		可能会降低运行速度，不过在高并发的应用中会提高性能。  -->
		<property name="statementReleaseHelperThreads" value="${db.statementReleaseHelperThreads}" />

		<!-- /** A connection older than maxConnectionAge will be destroyed and purged from the pool. */ -->
		<!-- 设置connection的存活时间。这个参数默认为0，单位：毫秒。设置为0该功能失效。
		通过ConnectionMaxAgeThread观察每个分区中的connection，不管connection是否空闲，
		如果这个connection距离创建的时间大于这个参数就会被清除。当前正在使用的connection不受影响，直到返回到连接池再做处理。 -->
		<!-- 48小时关闭一个链接 -->
		<property name="maxConnectionAgeInSeconds" value="${db.maxConnectionAgeInSeconds}" />

		<!-- /** SQL statement to use for keep-alive/test of connection. */ -->
		<property name="connectionTestStatement" value="${db.connectionTestStatement}" />

		<!-- 设置connection的空闲存活时间。这个参数默认为60*60，单位：分钟。设置为0该功能失效。
		通过ConnectionTesterThread观察每个分区中的connection，如果这个connection距离最后使用的时间大于这个参数就会被清除。
		注意：这个参数仅和idleConnectionTestPeriodInSeconds搭配使用，而且不要在这里设置任何挑衅的参数！  -->
		<!-- 1小时回收空闲链接 -->
		<property name="idleMaxAgeInSeconds" value="${db.idleMaxAgeInSeconds}" />

		<!-- /** Connections older than this are sent a keep-alive statement. */ -->
		<!-- 设置测试connection的间隔时间。这个参数默认为240*60，单位：分钟。设置为0该功能失效。
		通过ConnectionTesterThread观察每个分区中的connection，
		如果这个connection距离最后使用的时间大于这个参数并且距离上一次测试的时间大于这个参数就会向数据库发送一条测试语句，如果执行失败则将这个connection清除。
		注意：这个值仅和idleMaxAge搭配使用，而且不要在这里设置任何挑衅的参数！ -->
		<!-- 4小时检测一次空闲链接 -->
		<property name="idleConnectionTestPeriodInSeconds" value="${db.idleConnectionTestPeriodInSeconds}" />

		<!-- /** After attempting to acquire a connection and failing, try to connect these many times before giving up. */ -->
		<!-- 设置重新获取连接的次数。这个参数默认为5。
		获取某个connection失败之后会多次尝试重新连接，如果在这几次还是失败则放弃。  -->
		<property name="acquireRetryAttempts" value="${db.acquireRetryAttempts}" />

		<!-- 设置重新获取连接的次数间隔时间。这个参数默认为7000，单位：毫秒。如果小于等于0，BoneCP将设置为1000。
		获取connection失败之后再次尝试获取connection的间隔时间。  -->
		<property name="acquireRetryDelayInMs" value="${db.acquireRetryDelayInMs}" />

		<!-- 设置连接池初始化功能。这个参数默认为false。
		设置为true，连接池将会初始化为空，直到获取第一个connection。  -->
		<property name="lazyInit" value="${db.lazyInit}" />

		<!-- 设置是否关闭JMX功能。这个参数默认为false。  -->
		<property name="disableJMX" value="${db.disableJMX}" />

		<!-- 设置连接池名字。用于当作JMX和助手线程名字的后缀。  -->
		<property name="poolName" value="${db.poolName}" />

		<!-- /** Min no of prepared statements to cache. */ -->
		<!-- 设置statement缓存个数。这个参数默认为0。  -->
		<property name="statementsCacheSize" value="${db.statementsCacheSize}" />

		<!-- 设置是否开启记录SQL语句功能。这个参数默认是false。
		将执行的SQL记录到日志里面（包括参数值）。  -->
		<property name="logStatementsEnabled" value="${db.logStatementsEnabled}" />

		<!-- 设置执行SQL的超时时间。这个参数默认为0；单位：毫秒。
		当查询语句执行的时间超过这个参数，执行的情况就会被记录到日志中。
		设置为0时，该功能失效。   -->
		<property name="queryExecuteTimeLimitInMs" value="${db.queryExecuteTimeLimit}" />
	</bean>

	<bean id="sqlSessionFactoryForLogistics" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="${mybatis.mappers}" />
		<property name="typeHandlersPackage" value="${mybatis.typeHandler.package}" />
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactoryForLogistics" />
	</bean>

	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 声明使用注解式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" order="2" />
</beans>